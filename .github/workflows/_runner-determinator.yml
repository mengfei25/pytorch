name: Check whether the workflow owner can use ARC runners

on:
  workflow_call:
    inputs:
      user_name:
        required: true
        type: string
        description: The name of the workflow owner.
      curr_branch:
        required: true
        type: string
        description: Current branch.
      issue_number:
        required: false
        type: string
        default: "5132"
        description: |
          Fetch's GitHub Issue from pytorch/test-infra
          Example: https://github.com/pytorch/test-infra/issues/5132

    outputs:
      label-type:
        description: Type of runners to use
        value: ${{ jobs.runner-determinator.outputs.label-type }}

jobs:
  runner-determinator:
    runs-on: linux.4xlarge
    outputs:
      label-type: ${{ steps.set-condition.outputs.label-type }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ISSUE_NUMBER: ${{ inputs.issue_number }}
      USERNAME: ${{ inputs.user_name }}
    steps:
      # - name: Checkout PyTorch
      #   uses: pytorch/pytorch/.github/actions/checkout-pytorch@main
      #   with:
      #     fetch-depth: 1
      #     submodules: true

      # TODO: Remove the hardcoded step below
      # Hardcoding below is temporary for testing ALI runners
      # This file below should match the script found in .github/scripts/get_workflow_type.py
      - name: Hardcode runner-determinator script
        run: |
          cat <<EOF > get_workflow_type.py
          import json
          from argparse import ArgumentParser
          from typing import Any, Tuple

          from github import Auth, Github
          from github.Issue import Issue


          WORKFLOW_LABEL_META = ""  # use meta runners
          WORKFLOW_LABEL_LF = "lf."  # use runners from the linux foundation
          LABEL_TYPE_KEY = "label_type"
          MESSAGE_KEY = "message"
          MESSAGE = ""  # Debug message to return to the caller


          def parse_args() -> Any:
              parser = ArgumentParser("Get dynamic rollout settings")
              parser.add_argument("--github-token", type=str, required=True, help="GitHub token")
              parser.add_argument(
                  "--github-repo",
                  type=str,
                  required=False,
                  default="pytorch/test-infra",
                  help="GitHub repo to get the issue",
              )
              parser.add_argument(
                  "--github-issue", type=int, required=True, help="GitHub issue umber"
              )
              parser.add_argument(
                  "--github-user", type=str, required=True, help="GitHub username"
              )
              parser.add_argument(
                  "--github-branch", type=str, required=True, help="Current GitHub branch"
              )

              return parser.parse_args()


          def get_gh_client(github_token: str) -> Github:
              auth = Auth.Token(github_token)
              return Github(auth=auth)


          def get_issue(gh: Github, repo: str, issue_num: int) -> Issue:
              repo = gh.get_repo(repo)
              return repo.get_issue(number=issue_num)


          def is_exception_branch(branch: str) -> bool:
              return branch.split("/")[0] in {"main", "nightly", "release", "landchecks"}


          def get_workflow_type(issue: Issue, username: str) -> Tuple[str, str]:
              formatted_username = (
                  f"@{username}"  # Add the @ symbol to match the format in the issue body
              )

              try:
                  user_list = issue.get_comments()[0].body.split()

                  if user_list[0] == "!":
                      MESSAGE = "LF Workflows are disabled for everyone. Using meta runners."
                      return WORKFLOW_LABEL_META, MESSAGE
                  elif user_list[0] == "*":
                      MESSAGE = "LF Workflows are enabled for everyone. Using LF runners."
                      return WORKFLOW_LABEL_LF, MESSAGE
                  elif formatted_username in user_list:
                      MESSAGE = f"LF Workflows are enabled for {username}. Using LF runners."
                      return WORKFLOW_LABEL_LF, MESSAGE
                  else:
                      MESSAGE = f"LF Workflows are disabled for {username}. Using meta runners."
                      return WORKFLOW_LABEL_META, MESSAGE
              except Exception as e:
                  MESSAGE = f"Failed to get determine workflow type. Falling back to meta runners. Exception: {e}"
                  return WORKFLOW_LABEL_META, MESSAGE


          def main() -> None:
              args = parse_args()

              if is_exception_branch(args.github_branch):
                  output = {
                      LABEL_TYPE_KEY: WORKFLOW_LABEL_META,
                      MESSAGE_KEY: f"Exception branch: '{args.github_branch}', using meta runners",
                  }
              else:
                  try:
                      gh = get_gh_client(args.github_token)
                      # The default issue we use - https://github.com/pytorch/test-infra/issues/5132
                      issue = get_issue(gh, args.github_repo, args.github_issue)
                      label_type, message = get_workflow_type(issue, args.github_user)
                      output = {
                          LABEL_TYPE_KEY: label_type,
                          MESSAGE_KEY: message,
                      }
                  except Exception as e:
                      output = {
                          LABEL_TYPE_KEY: WORKFLOW_LABEL_META,
                          MESSAGE_KEY: f"Failed to get issue. Falling back to meta runners. Exception: {e}",
                      }

              json_output = json.dumps(output)
              print(json_output)


          if __name__ == "__main__":
              main()
          EOF
          cat get_workflow_type.py

      - name: Install dependencies
        run: python3 -m pip install urllib3==1.26.18 PyGithub==2.3.0

      - name: Get the workflow type for the current user
        id: set-condition
        run: |
          curr_branch="${{ inputs.curr_branch }}"
          echo "Current branch is '$curr_branch'"

          output="$(python3 get_workflow_type.py \
            --github-token "$GITHUB_TOKEN" \
            --github-issue "$ISSUE_NUMBER" \
            --github-branch "$curr_branch" \
            --github-user "$USERNAME")"

          echo "Output: '${output}'"

          LABEL_TYPE=$(echo "${output}" | jq -r '.label_type')
          echo "label-type=$LABEL_TYPE" >> "$GITHUB_OUTPUT"
